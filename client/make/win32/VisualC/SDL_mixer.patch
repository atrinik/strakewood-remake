--- mixer.c	2009-11-14 19:31:39 +0000
+++ mixer.c	2010-07-19 21:28:05 +0100
@@ -512,6 +512,24 @@
 	return(audio_opened);
 }
 
+/* Wrapper which calls the correct function to free the audio buffer,
+   depending on whether or not the buffer was allocated in the shared library.
+*/
+void _Mix_FreeWAV(Mix_Chunk *chunk)
+{
+	/* Sanity check */
+	if ( !chunk ) {
+		return;
+	}
+
+	if ( chunk->shared ) {
+		SDL_FreeWAV(chunk->abuf);
+	}
+	else {
+		free(chunk->abuf);
+	}
+}
+
 
 /*
  * !!! FIXME: Ideally, we want a Mix_LoadSample_RW(), which will handle the
@@ -551,6 +569,7 @@
 		}
 		return(NULL);
 	}
+	chunk->shared = 0;
 
 	/* Find out what kind of audio file this is */
 	magic = SDL_ReadLE32(src);
@@ -560,6 +579,7 @@
 	switch (magic) {
 		case WAVE:
 		case RIFF:
+			chunk->shared = 1;
 			loaded = SDL_LoadWAV_RW(src, freesrc, &wavespec,
 					(Uint8 **)&chunk->abuf, &chunk->alen);
 			break;
@@ -601,7 +621,7 @@
 	if ( SDL_BuildAudioCVT(&wavecvt,
 			wavespec.format, wavespec.channels, wavespec.freq,
 			mixer.format, mixer.channels, mixer.freq) < 0 ) {
-		SDL_FreeWAV(chunk->abuf);
+		_Mix_FreeWAV(chunk);
 		free(chunk);
 		return(NULL);
 	}
@@ -610,12 +630,12 @@
 	wavecvt.buf = (Uint8 *)malloc(wavecvt.len*wavecvt.len_mult);
 	if ( wavecvt.buf == NULL ) {
 		SDL_SetError("Out of memory");
-		SDL_FreeWAV(chunk->abuf);
+		_Mix_FreeWAV(chunk);
 		free(chunk);
 		return(NULL);
 	}
 	memcpy(wavecvt.buf, chunk->abuf, chunk->alen);
-	SDL_FreeWAV(chunk->abuf);
+	_Mix_FreeWAV(chunk);
 
 	/* Run the audio converter */
 	if ( SDL_ConvertAudio(&wavecvt) < 0 ) {
@@ -711,7 +731,7 @@
 		SDL_UnlockAudio();
 		/* Actually free the chunk */
 		if ( chunk->allocated ) {
-			free(chunk->abuf);
+			_Mix_FreeWAV(chunk);
 		}
 		free(chunk);
 	}
--- SDL_mixer.h	2009-11-16 04:40:54 +0000
+++ SDL_mixer.h	2010-07-19 21:32:26 +0100
@@ -104,6 +104,7 @@
 	Uint8 *abuf;
 	Uint32 alen;
 	Uint8 volume;		/* Per-sample volume, 0-128 */
+	int shared;
 } Mix_Chunk;
 
 /* The different fading types supported */
